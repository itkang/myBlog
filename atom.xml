<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Ryan's blog]]></title>
  <link href="blog.itkang.com/atom.xml" rel="self"/>
  <link href="blog.itkang.com/"/>
  <updated>2016-09-05T14:22:15+08:00</updated>
  <id>blog.itkang.com/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://www.coderforart.com/">CoderForArt</generator>

  
  <entry>
    <title type="html"><![CDATA[mybatis ${value} 和 #{value}的区别]]></title>
    <link href="blog.itkang.com/14730569214118.html"/>
    <updated>2016-09-05T14:28:41+08:00</updated>
    <id>blog.itkang.com/14730569214118.html</id>
    <content type="html"><![CDATA[
<ol>
<li>#{value}将传入的数据都当成一个字符串，会对自动传入的数据加一个双引号。</li>
<li>${value}将传入的数据直接显示生成在sql中。</li>
<li>#{value}方式能够很大程度防止sql注入。　</li>
<li>${value}方式无法防止Sql注入。</li>
<li>${value}方式一般用于传入数据库对象，例如传入表名.</li>
<li>一般能用#{value}的就别用${value} </li>
<li>MyBatis排序时使用order by 动态参数时需要注意，用${value}而不是#{value}</li>
</ol>

<p>字符串替换<br/>
默认情况下，使用#{value}格式的语法会导致MyBatis创建预处理语句属性并以它为背景设置安全的值。这样做很安全，很迅速也是首选做法，有时你只是想直接在SQL语句中插入一个不改变的字符串。</p>

<p>重要：接受从用户输出的内容并提供给语句中不变的字符串，这样做是不安全的。这会导致潜在的SQL注入攻击，因此你不应该允许用户输入这些字段，或者通常自行转义并检查。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[转]用nginx日志+iptables防御CC攻击]]></title>
    <link href="blog.itkang.com/14730561896996.html"/>
    <updated>2016-09-05T14:16:29+08:00</updated>
    <id>blog.itkang.com/14730561896996.html</id>
    <content type="html"><![CDATA[
<pre><code>摘要
本文介绍一个简单完整的对抗cc攻击的方法 使用软件： nginx + redis + iptables 还有少量awk命令
</code></pre>

<h3 id="toc_0">攻击情况</h3>

<p>最近被cc攻击，搞得mysql压力很大，访问速度很慢或者无法访问<br/>
看了一下nginx日志，发现日志里面$http_user_agent这个变量中总有包含“Baiduspider”这个变量。<br/>
如下图<br/>
<img src="media/14730561896996/14730562558317.png" alt=""/></p>

<h3 id="toc_1">解决思路</h3>

<ol>
<li>找出所有包含“Baiduspider”的ip地址</li>
<li>用iptables禁用这些地址</li>
</ol>

<h3 id="toc_2">具体解决方法</h3>

<p>安装redis</p>

<pre><code>aptitude install redis-server
</code></pre>

<h3 id="toc_3">跟踪分析nginx日志，把发起攻击的ip地址存放到redis中</h3>

<pre><code>tail -f /mnt/log/nginx/tuan.ganghaoyouhuo.access.log|awk { if($15 ~ /Baidu/ || $17 ~ /Baidu/) system(&quot;redis-cli zincrby black 1 &quot;$1)}
</code></pre>

<p>解释一下上述脚本<br/>
首先，用tail命令跟踪分析nginx日志，<br/>
然后用管道命令，连接awk命令，<br/>
分析日志的第15或17列，<br/>
如果能匹配到/Baidu/这个关键字，就调起redis命令redis-cli，<br/>
使用zincrby方法，给找到的ip地址（nginx日志的第一列，所以是$1），记录访问记录加1.</p>

<p>几分钟后查看一下redis中的结果<br/>
<img src="media/14730561896996/14730564335013.png" alt=""/></p>

<p>发起攻击的IP地址已经被存到redis里了。在redis中使用有序集合来存放ip地址，可以避免重复增加ip地址，还可以统计攻击发起的次数。</p>

<p>为了偷懒不需要经常重新扫nginx日志，这里增加一个后台运行程序，跟随nginx日志的增长来实时分析它，这样可以降低压力。让这个命令在后台运行，不随命令行窗口终结，需要使用nohup命令：</p>

<pre><code>nohup tail -f /mnt/log/nginx/tuan.ganghaoyouhuo.access.log |awk &#39;{ if($15 ~ /Baidu/ || $17 ~ /Baidu/) system(&quot;redis-cli zincrby black 1 &quot;$1)}&#39; &amp;
</code></pre>

<h3 id="toc_4">这时候就可以把iptables中的ip地址添加到iptables中禁用掉了</h3>

<p>先把禁用命令输出出来看一下</p>

<pre><code>redis-cli zrevrange black 0 -1|awk  &#39;{print &quot;iptables -I INPUT -s &quot;$0&quot; -j DROP&quot;}&#39;
</code></pre>

<p>命令解释<br/>
用redis的zrevrange命令，把记录的ip地址全部输出出来<br/>
用管道命令连接awk命令，拼接添加禁用地址的命令语句<br/>
结果如下</p>

<p><img src="media/14730561896996/14730565063565.png" alt=""/></p>

<p>修改一下命令，让iptables命令直接运行</p>

<pre><code>redis-cli zrevrange black 0 -1|grep &#39;&#39;|awk  &#39;{system( &quot;iptables -I INPUT -s &quot;$0&quot; -j DROP&quot;)}&#39;
</code></pre>

<p>查看运行结果</p>

<pre><code>iptables -L -n
</code></pre>

<p><img src="media/14730561896996/14730565134323.png" alt=""/></p>

<p>这样，发起攻击的ip地址已经全部被禁用了。</p>

<p>过一定的时间后，可以重复执行上面的命令，刷新iptables中的禁用地址列表<br/>
这样发起cc攻击的ip地址就全被禁用掉了，再看一下nginx日志，是不是变得舒缓了起来</p>

<h3 id="toc_5">增强方案</h3>

<p>CC攻击通常有这样的特征</p>

<p>1.一般的CC攻击，攻击方都会定制浏览器类型，就是nginx收到的$http_user_agent变量。这是最容易获取特征的地方。</p>

<p>2.都集中攻击某几个url地址。</p>

<p>3.一般的CC攻击并没有海量的ip地址，能有几万个IP地址已经很了不起了。</p>

<p>所以可以根据这样的特征来设计应对方案。按照$http_user_agent和被访问的url地址来判断是否是攻击行为，利用redis来计算访问次数，再封禁异常的访问IP，这样可以应对多数的cc攻击。</p>

<p>原文地址：<a href="http://my.oschina.net/phptiger86/blog/739855">http://my.oschina.net/phptiger86/blog/739855</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用github作为中转自动更新服务器中的文件]]></title>
    <link href="blog.itkang.com/14727867129045.html"/>
    <updated>2016-09-02T11:25:12+08:00</updated>
    <id>blog.itkang.com/14727867129045.html</id>
    <content type="html"><![CDATA[
<pre><code>#! /bin/bash
cd /home/itkang/Blog;git pull origin master;git add .;git commit -m &quot;upgrade&quot;;git push origin master; #本地文件提交到github
ssh $USER@$SERVER &#39;cd /home/myBlog;git pull origin master;&#39; #远程服务器pull文件
echo &#39;all upgrade&#39;;
</code></pre>

<p>执行效果如下所示<br/>
<img src="media/14727867129045/case.gif" alt="case"/></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[test]]></title>
    <link href="blog.itkang.com/14727830831718.html"/>
    <updated>2016-09-02T10:24:43+08:00</updated>
    <id>blog.itkang.com/14727830831718.html</id>
    <content type="html"><![CDATA[

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[测试自动更新]]></title>
    <link href="blog.itkang.com/14727828776702.html"/>
    <updated>2016-09-02T10:21:17+08:00</updated>
    <id>blog.itkang.com/14727828776702.html</id>
    <content type="html"><![CDATA[

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[tet]]></title>
    <link href="blog.itkang.com/14727828735415.html"/>
    <updated>2016-09-02T10:21:13+08:00</updated>
    <id>blog.itkang.com/14727828735415.html</id>
    <content type="html"><![CDATA[

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[]]></title>
    <link href="blog.itkang.com/14727284110565.html"/>
    <updated>2016-09-01T19:13:31+08:00</updated>
    <id>blog.itkang.com/14727284110565.html</id>
    <content type="html"><![CDATA[

]]></content>
  </entry>
  
</feed>
